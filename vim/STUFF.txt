" Stuff that might eventually make it into .vimrc

- Find way to set autoread on a file-type basis? (autoread for go, not for python, etc..)
- Send email with buffer/selected contents

///////////////////////////////////////////////////////////////////////////////

" Function to automatically send text to private pastebin, might be a good plugin
let g:pfx=''                " prefix for private pastebin

function PBSubmit()
python << EOF
import vim
import urllib2 as url
import urllib

pfx = vim.eval('g:pfx')

URL = 'http://'

if pfx == '':
    URL += 'pastebin.com/pastebin.php'
else:
    URL += pfx + '.pastebin.com/pastebin.php'

data = urllib.urlencode(
    {   'code2': '\n'.join(vim.current.buffer).decode('utf-8').encode('latin-1'),
        'email':    '',
        'expiry':   'd',
        'format': 'text',
        'parent_pid':   '',
        'paste':        'Send',
        'poster':       '' }
    )

url.urlopen(URL,data)

print 'Submitted to ' + URL
EOF
endfunction

map <Leader>pb :call PBSubmit()<CR>

///////////////////////////////////////////////////////////////////////////////

" Various functions

" The function Nr2Hex() returns the Hex string of a number.
func! Nr2Hex(nr)
 let n = a:nr
 let r = ""
 while n
  let r = '0123456789ABCDEF'[n % 16] . r
  let n = n / 16
 endwhile
 return r
endfunc

" The function String2Hex() converts each character in a string to a two
" character Hex string.
func! String2Hex(str)
 let out = ''
 let ix = 0
 while ix < strlen(a:str)
  let out = out . Nr2Hex(char2nr(a:str[ix]))
  let ix = ix + 1
 endwhile
 return out
endfunc

" translates hex value to the corresponding number
fun! Hex2Nr(hex)
 let r = 0
 let ix = strlen(a:hex) - 1
 while ix >= 0
  let val = 0
  if a:hex[ix] == '1'
   let val = 1
  elseif a:hex[ix] == '2'
   let val = 2
  elseif a:hex[ix] == '3'
   let val = 3
  elseif a:hex[ix] == '4'
   let val = 4
  elseif a:hex[ix] == '5'
   let val = 5
  elseif a:hex[ix] == '6'
   let val = 6
  elseif a:hex[ix] == '7'
   let val = 7
  elseif a:hex[ix] == '8'
   let val = 8
  elseif a:hex[ix] == '9'
   let val = 9
  elseif a:hex[ix] == 'a' || a:hex[ix] == 'A'
   let val = 10
  elseif a:hex[ix] == 'b' || a:hex[ix] == 'B'
   let val = 11
  elseif a:hex[ix] == 'c' || a:hex[ix] == 'C'
   let val = 12
  elseif a:hex[ix] == 'd' || a:hex[ix] == 'D'
   let val = 13
  elseif a:hex[ix] == 'e' || a:hex[ix] == 'E'
   let val = 14
  elseif a:hex[ix] == 'f' || a:hex[ix] == 'F'
   let val = 15
  endif
  let r = r + val * Power(16, strlen(a:hex) - ix - 1)
  let ix = ix - 1
 endwhile
 return r
endfunc
